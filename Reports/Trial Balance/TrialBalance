SELECT
  CAST(f.Id AS VARCHAR2(50)) AS ACCOUNT_ID,
  CAST(CASE WHEN gld.Source = 'TOTAL' THEN f.Number ELSE NULL END AS VARCHAR2(50)) AS FINANCIAL_ACCOUNT_NUMBER,
  CAST(CASE WHEN gld.Source = 'TOTAL' THEN f.Name ELSE NULL END AS VARCHAR2(100)) AS FINANCIAL_ACCOUNT_NAME,
  CAST(CASE WHEN gld.Source = 'TOTAL' THEN f.Type ELSE NULL END AS VARCHAR2(50)) AS FINANCIAL_ACCOUNT_TYPE,
  -- ALWAYS include for detail/subtotal, only NULL for summary lines
  CAST(f.FinancialStatement AS VARCHAR2(100)) AS FINANCIAL_STATEMENT,
  CAST(CASE WHEN gld.Source = 'TOTAL' THEN NULL ELSE gld.Source END AS VARCHAR2(100)) AS GL_SOURCE,
  :CURRENCY AS CURRENCY,
  CAST(CASE WHEN gld.Source = 'TOTAL' THEN 'Subtotal' ELSE 'Detail' END AS VARCHAR2(50)) AS ROW_TYPE,
  common_util.format_to_ui(NVL(gld.Balance,0), 'CURRENCY') AS BALANCE,
  CASE WHEN gld.Source = 'TOTAL' THEN 2 ELSE 1 END AS SORT_ORDER,
  CAST(CASE WHEN gld.Source = 'TOTAL' THEN 'Subtotal' ELSE NULL END AS VARCHAR2(50)) AS SUMMARY_TYPE
FROM FINANCIAL_ACCOUNT f,
     ACCOUNTING_PERIOD a,
     (
        SELECT
          gl.FinancialAccountId,
          gl.Source,
          (SUM(NVL(gl.DebitAmount,0)) - SUM(NVL(gl.CreditAmount,0))) AS Balance
        FROM GENERAL_LEDGER_TRANSACTION gl
        WHERE gl.AccountingPeriodId IN (
          SELECT ap.Id FROM ACCOUNTING_PERIOD ap
            CONNECT BY NOCYCLE PRIOR ap.Id = ap.ParentId
            START WITH ap.Id = :ACCOUNTING_PERIOD)
          AND gl.CurrencyCode = :CURRENCY
        GROUP BY gl.FinancialAccountId, gl.Source
        UNION ALL
        SELECT
          gl.FinancialAccountId,
          'TOTAL' AS Source,
          (SUM(NVL(gl.DebitAmount,0)) - SUM(NVL(gl.CreditAmount,0))) AS Balance
        FROM GENERAL_LEDGER_TRANSACTION gl
        WHERE gl.AccountingPeriodId IN (
          SELECT ap.Id FROM ACCOUNTING_PERIOD ap
            CONNECT BY NOCYCLE PRIOR ap.Id = ap.ParentId
            START WITH ap.Id = :ACCOUNTING_PERIOD)
          AND gl.CurrencyCode = :CURRENCY
        GROUP BY gl.FinancialAccountId
     ) gld
WHERE f.Id = gld.FinancialAccountId(+)
  AND a.Id = :ACCOUNTING_PERIOD
  AND :ACCOUNTING_PERIOD IS NOT NULL
  AND :CURRENCY IS NOT NULL
  AND NVL(gld.Balance,0) <> 0

UNION ALL

-- Totals (SUMMARY_TYPE = 'Total')
SELECT
  CAST(NULL AS VARCHAR2(50)) AS ACCOUNT_ID,
  CAST(NULL AS VARCHAR2(50)) AS FINANCIAL_ACCOUNT_NUMBER,
  CAST(NULL AS VARCHAR2(100)) AS FINANCIAL_ACCOUNT_NAME,
  CAST(NULL AS VARCHAR2(50)) AS FINANCIAL_ACCOUNT_TYPE,
  CAST(f.FinancialStatement AS VARCHAR2(100)) AS FINANCIAL_STATEMENT,
  CAST(NULL AS VARCHAR2(100)) AS GL_SOURCE,
  :CURRENCY AS CURRENCY,
  CAST('Total' AS VARCHAR2(50)) AS ROW_TYPE,
  common_util.format_to_ui(SUM(NVL(gld.Balance,0)), 'CURRENCY') AS BALANCE,
  3 AS SORT_ORDER,
  CAST('Total' AS VARCHAR2(50)) AS SUMMARY_TYPE
FROM FINANCIAL_ACCOUNT f,
     (
        SELECT
          gl.FinancialAccountId,
          'TOTAL' AS Source,
          (SUM(NVL(gl.DebitAmount,0)) - SUM(NVL(gl.CreditAmount,0))) AS Balance
        FROM GENERAL_LEDGER_TRANSACTION gl
        WHERE gl.AccountingPeriodId IN (
          SELECT ap.Id FROM ACCOUNTING_PERIOD ap
            CONNECT BY NOCYCLE PRIOR ap.Id = ap.ParentId
            START WITH ap.Id = :ACCOUNTING_PERIOD)
          AND gl.CurrencyCode = :CURRENCY
        GROUP BY gl.FinancialAccountId
     ) gld
WHERE f.Id = gld.FinancialAccountId(+)
GROUP BY f.FinancialStatement
HAVING SUM(NVL(gld.Balance,0)) <> 0

UNION ALL

-- Grand Total (SUMMARY_TYPE = 'Total')
SELECT
  CAST(NULL AS VARCHAR2(50)) AS ACCOUNT_ID,
  CAST(NULL AS VARCHAR2(50)) AS FINANCIAL_ACCOUNT_NUMBER,
  CAST(NULL AS VARCHAR2(100)) AS FINANCIAL_ACCOUNT_NAME,
  CAST(NULL AS VARCHAR2(50)) AS FINANCIAL_ACCOUNT_TYPE,
  CAST(NULL AS VARCHAR2(100)) AS FINANCIAL_STATEMENT,
  CAST(NULL AS VARCHAR2(100)) AS GL_SOURCE,
  :CURRENCY AS CURRENCY,
  CAST('Total' AS VARCHAR2(50)) AS ROW_TYPE,
  common_util.format_to_ui(SUM(NVL(gld.Balance,0)), 'CURRENCY') AS BALANCE,
  4 AS SORT_ORDER,
  CAST('Total' AS VARCHAR2(50)) AS SUMMARY_TYPE
FROM FINANCIAL_ACCOUNT f,
     (
        SELECT
          gl.FinancialAccountId,
          'TOTAL' AS Source,
          (SUM(NVL(gl.DebitAmount,0)) - SUM(NVL(gl.CreditAmount,0))) AS Balance
        FROM GENERAL_LEDGER_TRANSACTION gl
        WHERE gl.AccountingPeriodId IN (
          SELECT ap.Id FROM ACCOUNTING_PERIOD ap
            CONNECT BY NOCYCLE PRIOR ap.Id = ap.ParentId
            START WITH ap.Id = :ACCOUNTING_PERIOD)
          AND gl.CurrencyCode = :CURRENCY
        GROUP BY gl.FinancialAccountId
     ) gld
WHERE f.Id = gld.FinancialAccountId(+)
HAVING SUM(NVL(gld.Balance,0)) <> 0

UNION ALL

-- Check Sum (SUMMARY_TYPE = 'Check Sum')
SELECT
  CAST(NULL AS VARCHAR2(50)) AS ACCOUNT_ID,
  CAST(NULL AS VARCHAR2(50)) AS FINANCIAL_ACCOUNT_NUMBER,
  CAST(NULL AS VARCHAR2(100)) AS FINANCIAL_ACCOUNT_NAME,
  CAST(NULL AS VARCHAR2(50)) AS FINANCIAL_ACCOUNT_TYPE,
  CAST(NULL AS VARCHAR2(100)) AS FINANCIAL_STATEMENT,
  CAST(NULL AS VARCHAR2(100)) AS GL_SOURCE,
  :CURRENCY AS CURRENCY,
  CAST('Check Sum' AS VARCHAR2(50)) AS ROW_TYPE,
  common_util.format_to_ui(SUM(BALANCE_NUM), 'CURRENCY') AS BALANCE,
  5 AS SORT_ORDER,
  CAST('Check Sum' AS VARCHAR2(50)) AS SUMMARY_TYPE
FROM (
  SELECT SUM(NVL(gld.Balance,0)) AS BALANCE_NUM
  FROM FINANCIAL_ACCOUNT f,
       (
          SELECT
            gl.FinancialAccountId,
            'TOTAL' AS Source,
            (SUM(NVL(gl.DebitAmount,0)) - SUM(NVL(gl.CreditAmount,0))) AS Balance
          FROM GENERAL_LEDGER_TRANSACTION gl
          WHERE gl.AccountingPeriodId IN (
            SELECT ap.Id FROM ACCOUNTING_PERIOD ap
              CONNECT BY NOCYCLE PRIOR ap.Id = ap.ParentId
              START WITH ap.Id = :ACCOUNTING_PERIOD)
            AND gl.CurrencyCode = :CURRENCY
          GROUP BY gl.FinancialAccountId
       ) gld
  WHERE f.Id = gld.FinancialAccountId(+)
  GROUP BY f.FinancialStatement
  UNION ALL
  SELECT SUM(NVL(gld.Balance,0)) AS BALANCE_NUM
  FROM FINANCIAL_ACCOUNT f,
       (
          SELECT
            gl.FinancialAccountId,
            'TOTAL' AS Source,
            (SUM(NVL(gl.DebitAmount,0)) - SUM(NVL(gl.CreditAmount,0))) AS Balance
          FROM GENERAL_LEDGER_TRANSACTION gl
          WHERE gl.AccountingPeriodId IN (
            SELECT ap.Id FROM ACCOUNTING_PERIOD ap
              CONNECT BY NOCYCLE PRIOR ap.Id = ap.ParentId
              START WITH ap.Id = :ACCOUNTING_PERIOD)
            AND gl.CurrencyCode = :CURRENCY
          GROUP BY gl.FinancialAccountId
       ) gld
  WHERE f.Id = gld.FinancialAccountId(+)
)
WHERE BALANCE_NUM <> 0

ORDER BY 5, 1, 10, 6